name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: stable
            os: ubuntu-latest
          - rust: stable
            os: windows-latest
          - rust: stable
            os: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Tectonic (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://drop-sh.fullyjustified.net | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install Tectonic (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --cask tectonic

    - name: Install TeX Live (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install texlive

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Test paperx commands
      run: |
        # Test creating a new paper
        cargo run -- new test-paper --title "Test Paper" --author "Test Author" --affiliation "Test University"
        cd test-paper
        
        # Test building (if LaTeX is available)
        if command -v tectonic &> /dev/null; then
          cargo run -- build
        elif command -v pdflatex &> /dev/null; then
          cargo run -- build --engine pdflatex
        else
          echo "No LaTeX engine available, skipping build test"
        fi

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build release binary
      run: cargo build --release

    - name: Upload release binary
      uses: actions/upload-artifact@v3
      with:
        name: paperx-${{ runner.os }}
        path: target/release/paperx

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build documentation
      run: cargo doc --no-deps

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
